---
variables:
  GIT_STRATEGY: clone
  GIT_DEPTH: 5
  REPO_PATH: research-and-development/sycl-onnx/sycl-onnx-runtime/onnxruntime
  COMPUTECPP_VERSION: "https://distribution.office.codeplay.com/computecpp/releases/latest/ComputeCpp-ASP-CE_RC-x86_64-linux-gnu.tar.gz"
  SYCLBLAS_URL: "https://github.com/codeplaysoftware/sycl-blas.git"
  SYCLBLAS_COMMIT: "927113928e8bfa509bc42935a29ae767239d31fe"
  SYCLDNN_URL: "https://github.com/codeplaysoftware/SYCL-DNN.git"
  SYCLDNN_COMMIT: "6a637ffe0de9107eb3379257cae8554b11e49a10"
  CA_PACKAGE: "ComputeAorta-riscv-llvm13+riscv-spike"
  REPOSITORY_DEFAULT_BRANCH: "sycl_stable"

workflow:
  rules:
    # Don't run on Draft MRs
    - if: $CI_COMMIT_MESSAGE =~ /-draft$/
      when: never
    # Run on Merge Requests
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Run when default branch is updated
    - if: $CI_COMMIT_BRANCH == $REPOSITORY_DEFAULT_BRANCH
    - if: $ORT_PIPELINE == "nightly"
    - if: $ORT_PIPELINE == "riscv"

stages:
  - build-base
  - build-ocl
  - build
  - test
  - deploy
  - promote

.mr-rules:
  rules:
    - if: ($ORT_PIPELINE == "nightly" || $ORT_PIPELINE == "riscv")
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $REPOSITORY_DEFAULT_BRANCH

.nightly-rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "schedule")
        && $ORT_PIPELINE == "nightly"

.riscv-rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "schedule")
        && $ORT_PIPELINE == "riscv"

default:
  tags: [linux-docker-images]
  before_script:
    - docker login
      -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

.build:
  script:
    - echo $IMAGE
    - echo $BUILD_TYPE
    - docker build
      --tag="${CI_REGISTRY}/${REPO_PATH}/${NAME}:$VERSION-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-${BUILD_TYPE}"
      --build-arg BASE_IMAGE="${IMAGE}"
      --build-arg BUILD_TYPE="${BUILD_TYPE}"
      --build-arg PIPELINE="${ORT_PIPELINE}"
      --build-arg COMPUTECPP_VERSION="${COMPUTECPP_VERSION}"
      --build-arg SYCLBLAS_URL="${SYCLBLAS_URL}"
      --build-arg SYCLDNN_URL="${SYCLDNN_URL}"
      --build-arg SYCLBLAS_COMMIT="${SYCLBLAS_COMMIT}"
      --build-arg SYCLDNN_COMMIT="${SYCLDNN_COMMIT}"
      --build-arg CA_PACKAGE="${CA_PACKAGE}"
      --build-arg COMPUTEAORTA_URL="${COMPUTEAORTA_URL}"
      --file=.gitlab/dockerfiles/${DOCKERFILE}
      .
    - docker push "$CI_REGISTRY/${REPO_PATH}/${NAME}:$VERSION-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-${BUILD_TYPE}"

.test:
  script:
    - echo ${DEVICE}
    - echo ${BUILD_TYPE}
    - docker run
      --device /dev/dri:/dev/dri
      --workdir=/source/build/Linux/${BUILD_TYPE}
      -e COMPUTECPP_TARGET=${DEVICE}
      ${CI_REGISTRY}/${REPO_PATH}/${NAME}:${VERSION}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-${BUILD_TYPE}
      ctest --output-on-failure --stop-on-failure -E "${TEST_FILTER}"

.deploy:
  variables:
    PACKAGE_NAME: "onnxruntime"
  script:
    - PACKAGE_TAR="${PACKAGE_NAME}-${CI_COMMIT_SHORT_SHA}-${BUILD_TYPE}.tar.gz"
    - VERSION=$(date -I)
    - docker cp $(docker create ${CI_REGISTRY}/${REPO_PATH}/ubuntu:18.04-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-${BUILD_TYPE}):/onnxruntime.tar.gz .
    - mv onnxruntime.tar.gz ${PACKAGE_TAR}
    - apk add curl
    - 'curl
      --header "JOB-TOKEN: $CI_JOB_TOKEN"
      --upload-file ${PACKAGE_TAR}
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}/${PACKAGE_TAR}'
    - echo ONNX_RUNTIME_VERSION=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}/${PACKAGE_TAR} >> deploy.env
    - echo COMPUTECPP_VERSION=${COMPUTECPP_VERSION} >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env

.base:
  variables:
    DOCKERFILE: Dockerfile.base
    IMAGE: ${CI_REGISTRY}/infrastructure/ci-environments/ubuntu-18.04-base
    NAME: ubuntu-base
    VERSION: "18.04"
build:base:
  extends: [.base, .build]
  stage: build-base

.ocl-base:
  stage: build-ocl
  needs: ["build:base"]
  variables:
    IMAGE: $CI_REGISTRY/${REPO_PATH}/ubuntu-base:${VERSION}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-
    VERSION: "18.04"
build:intel-ocl:
  # Run this job for nightly pipeline, MRs and when the default branch is updated;
  # don't run for riscv pipeline. Note that the order of the rules matters.
  rules:
    - if: $ORT_PIPELINE == "riscv"
      when: never
    - if: $ORT_PIPELINE == "nightly"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $REPOSITORY_DEFAULT_BRANCH
  variables:
    DOCKERFILE: Dockerfile.intel_ocl
    NAME: intel-ocl
  extends: [.ocl-base, .build]
build:compute-aorta:
  rules:
    - if: $ORT_PIPELINE == "riscv"
  variables:
    DOCKERFILE: Dockerfile.compute_aorta
    NAME: compute-aorta
  extends: [.riscv-rules, .ocl-base, .build]

.build-base:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    DOCKERFILE: Dockerfile.ort
    NAME: ubuntu
    VERSION: "18.04"
build:merge-request:
  variables:
    IMAGE: $CI_REGISTRY/${REPO_PATH}/intel-ocl:${VERSION}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  extends: [.mr-rules, .build-base, .build]
  needs: ["build:intel-ocl"]
build:nightly:
  variables:
    IMAGE: $CI_REGISTRY/${REPO_PATH}/intel-ocl:${VERSION}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-
    BUILD_TYPE: Release
  extends: [.nightly-rules, .build-base, .build]
  needs: ["build:intel-ocl"]
build:riscv:
  variables:
    IMAGE: $CI_REGISTRY/${REPO_PATH}/compute-aorta:${VERSION}-${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}-
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  extends: [.riscv-rules, .build-base, .build]
  needs: ["build:compute-aorta"]

.test-base:
  stage: test
  variables:
    GIT_STRATEGY: none
    NAME: ubuntu
    VERSION: "18.04"
test:merge-request:
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
        DEVICE: ["intel:cpu"] # FIXME: Add intel:gpu testing
  extends: [.mr-rules, .test-base, .test]
  needs: ["build:merge-request"]
test:nightly:
  variables:
    BUILD_TYPE: Release
    DEVICE: "intel:cpu" # FIXME: Add intel:gpu testing
  extends: [.nightly-rules, .test-base, .test]
  needs: ["build:nightly"]
test:riscv:
  variables:
    TEST_FILTER: "MetadataTestGPU|MetadataTestCPU"
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  extends: [.riscv-rules, .test-base, .test]
  needs: ["build:riscv"]

.deploy-base:
  stage: deploy
deploy:
  variables:
    GIT_STRATEGY: none
    BUILD_TYPE: Release
  extends: [.nightly-rules, .deploy-base, .deploy]
  needs: ["test:nightly"]

promote:
  stage: promote
  extends: [.nightly-rules]
  needs:
    - job: deploy
      artifacts: true
  inherit:
    variables: false
  trigger:
    project: webservices/acoran-for-risc-v-documentation
    branch: master
    strategy: depend
